// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`an infinite canvas context that adds a drawing that depends on the transformation and then draws using a non-identity transformation should have set the transformed version of the state 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 2",
  "context.lineDashOffset = 2",
  "context.setLineDash([2,2])",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(20,0)",
  "context.lineTo(20,20)",
  "context.lineTo(0,20)",
  "context.lineTo(0,0)",
  "context.stroke()",
]
`;

exports[`an infinite canvas context that alters its state and draws a rectangle and then clears a rectangle containing the drawing should have cleared a rectangle and nothing else 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
]
`;

exports[`an infinite canvas context that alters its state and draws a rectangle should have called the context methods 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#00f\\"",
  "context.strokeStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(1,1)",
  "context.lineTo(2,1)",
  "context.lineTo(2,2)",
  "context.lineTo(1,2)",
  "context.lineTo(1,1)",
  "context.fill()",
]
`;

exports[`an infinite canvas context that begins path and then builds it and fills it and then clears a smaller area than the one that was closed and adds another instruction and then clears an area containing all previous instructions and then draws something else should have cleared a rectangle once more 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.strokeStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(1,0)",
  "context.lineTo(1,1)",
  "context.lineTo(0,1)",
  "context.lineTo(0,0)",
  "context.fill()",
]
`;

exports[`an infinite canvas context that begins path and then builds it and fills it and then clears a smaller area than the one that was closed and adds another instruction and then clears an area containing all previous instructions should have cleared a rectangle once 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
]
`;

exports[`an infinite canvas context that begins path and then builds it and fills it and then clears a smaller area than the one that was closed and adds another instruction should still have executed the instructions in the completed area and should have added a clear rect instruction 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(3,0)",
  "context.lineTo(0,3)",
  "context.closePath()",
  "context.fill()",
  "context.save()",
  "context.transform(1,0,0,1,0,0)",
  "context.clearRect(0,0,2,2)",
  "context.restore()",
  "context.strokeStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(2,0)",
  "context.stroke()",
]
`;

exports[`an infinite canvas context that begins path and then builds it and fills it and then clears an area that is outside the drawn area should not have done anything 1`] = `Array []`;

exports[`an infinite canvas context that begins path and then builds it and fills it should have executed the new instructions 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(3,0)",
  "context.lineTo(0,3)",
  "context.closePath()",
  "context.fill()",
]
`;

exports[`an infinite canvas context that creates a rectangular path, fills another rectangle and then fills the created path should have filled both rectangles 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(50,50)",
  "context.lineTo(100,50)",
  "context.lineTo(100,100)",
  "context.lineTo(50,100)",
  "context.lineTo(50,50)",
  "context.fill()",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(50,0)",
  "context.lineTo(50,50)",
  "context.lineTo(0,50)",
  "context.lineTo(0,0)",
  "context.fill()",
]
`;

exports[`an infinite canvas context that creates a rectangular path, strokes another rectangle and then strokes the created path should have stroked both rectangles 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.strokeStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(50,50)",
  "context.lineTo(100,50)",
  "context.lineTo(100,100)",
  "context.lineTo(50,100)",
  "context.lineTo(50,50)",
  "context.stroke()",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(50,0)",
  "context.lineTo(50,50)",
  "context.lineTo(0,50)",
  "context.lineTo(0,0)",
  "context.stroke()",
]
`;

exports[`an infinite canvas context that does this should have done this 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.setTransform(1,0,0,1,10,10)",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(25,0)",
  "context.lineTo(25,25)",
  "context.lineTo(0,25)",
  "context.lineTo(0,0)",
  "context.fill()",
  "context.setTransform(1,0,0,1,0,0)",
  "context.setTransform(1,0,0,1,60,10)",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(25,0)",
  "context.lineTo(25,25)",
  "context.lineTo(0,25)",
  "context.lineTo(0,0)",
  "context.fill()",
  "context.setTransform(1,0,0,1,0,0)",
]
`;

exports[`an infinite canvas context that draws a path, fills it and then adds to the path and then strokes the path should have executed the last path modification only once 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(30,30)",
  "context.lineTo(30,100)",
  "context.lineTo(100,100)",
  "context.fill()",
  "context.lineTo(100,30)",
  "context.stroke()",
]
`;

exports[`an infinite canvas context that fills a rectangle, clears part of it and then clears a bigger part of it should end up with only one clear rect instruction 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(5,0)",
  "context.lineTo(5,5)",
  "context.lineTo(0,5)",
  "context.lineTo(0,0)",
  "context.fill()",
  "context.save()",
  "context.transform(1,0,0,1,0,0)",
  "context.clearRect(1,1,3,3)",
  "context.restore()",
]
`;

exports[`an infinite canvas context that fills a rectangle, creates a path inside it, clears a rectangle inside the first rectangle and then fills the created path should have executed everything 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(100,0)",
  "context.lineTo(100,100)",
  "context.lineTo(0,100)",
  "context.lineTo(0,0)",
  "context.fill()",
  "context.fillStyle = \\"#00f\\"",
  "context.beginPath()",
  "context.moveTo(50,0)",
  "context.lineTo(50,50)",
  "context.lineTo(0,50)",
  "context.lineTo(0,0)",
  "context.closePath()",
  "context.save()",
  "context.transform(1,0,0,1,0,0)",
  "context.clearRect(0,0,75,75)",
  "context.restore()",
  "context.fill()",
]
`;

exports[`an infinite canvas context that fills a rectangle, fills a smaller rectangle inside it and clears a rectangle containing the small one but not the big one should forget all about the second rectangle 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(5,0)",
  "context.lineTo(5,5)",
  "context.lineTo(0,5)",
  "context.lineTo(0,0)",
  "context.fill()",
  "context.save()",
  "context.transform(1,0,0,1,0,0)",
  "context.clearRect(1,1,3,3)",
  "context.restore()",
]
`;

exports[`an infinite canvas context that is translated and then draws a rectangle and then clears a rectangle covering the place where the rectangle was drawn should not have added an instruction to clear a rect 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
]
`;

exports[`an infinite canvas context that is translated and then draws a rectangle should have called setTransform on the context 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.setTransform(1,0,0,1,2,0)",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(1,0)",
  "context.lineTo(1,1)",
  "context.lineTo(0,1)",
  "context.lineTo(0,0)",
  "context.fill()",
  "context.setTransform(1,0,0,1,0,0)",
]
`;

exports[`an infinite canvas context that is translated and then the viewbox is transformed and it draws a rectangle should have called setTransform on the context with the right transformation 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.setTransform(1,0,0,1,4,0)",
  "context.lineWidth = 2",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(2,0)",
  "context.lineTo(2,2)",
  "context.lineTo(0,2)",
  "context.lineTo(0,0)",
  "context.fill()",
  "context.setTransform(1,0,0,1,0,0)",
]
`;

exports[`an infinite canvas context whose state is changed and then draws something should have modified the context correctly 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(20,0)",
  "context.lineTo(20,20)",
  "context.lineTo(0,20)",
  "context.lineTo(0,0)",
  "context.fill()",
]
`;

exports[`an infinite canvas context whose state is changed and who draws something and which then changes the state and clears part of the drawing and draws something else should have drawn using the state from before the clearing 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(1,1)",
  "context.lineTo(3,1)",
  "context.lineTo(3,3)",
  "context.lineTo(1,3)",
  "context.lineTo(1,1)",
  "context.fill()",
  "context.fillStyle = \\"#00f\\"",
  "context.save()",
  "context.transform(1,0,0,1,0,0)",
  "context.clearRect(2,0,4,4)",
  "context.restore()",
  "context.beginPath()",
  "context.moveTo(3,1)",
  "context.lineTo(4,1)",
  "context.lineTo(4,2)",
  "context.lineTo(3,2)",
  "context.lineTo(3,1)",
  "context.fill()",
]
`;

exports[`an infinite canvas context whose state is changed and who draws something and which then clears an area containing that instruction and which then draws something else should have cleared a rect only once more and should not have executed the old instruction again 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#00f\\"",
  "context.beginPath()",
  "context.moveTo(1,1)",
  "context.lineTo(3,1)",
  "context.lineTo(3,3)",
  "context.lineTo(1,3)",
  "context.lineTo(1,1)",
  "context.fill()",
]
`;

exports[`an infinite canvas context whose state is changed and who draws something and which then clears an area containing that instruction and which then draws something else without changing the state should have cleared a rect only once more and should still use the old state 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(1,1)",
  "context.lineTo(3,1)",
  "context.lineTo(3,3)",
  "context.lineTo(1,3)",
  "context.lineTo(1,1)",
  "context.fill()",
]
`;

exports[`an infinite canvas context whose state is changed and who draws something and which then clears an area containing that instruction should have cleared a rectangle 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
]
`;

exports[`an infinite canvas context whose state is changed and who draws something and which then draws something else and which then clears the first part and part of the second should have remembered the state for the second part 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(4,1)",
  "context.lineTo(6,1)",
  "context.lineTo(6,3)",
  "context.lineTo(4,3)",
  "context.lineTo(4,1)",
  "context.fill()",
  "context.save()",
  "context.transform(1,0,0,1,0,0)",
  "context.clearRect(0,0,4.5,4)",
  "context.restore()",
]
`;

exports[`an infinite canvas context whose state is changed and who draws something and which then draws something else and which then clears the first part should have remembered the state for the second part 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(4,1)",
  "context.lineTo(6,1)",
  "context.lineTo(6,3)",
  "context.lineTo(4,3)",
  "context.lineTo(4,1)",
  "context.fill()",
]
`;

exports[`an infinite canvas context whose state is changed and who draws something and which then draws something else should not have altered the state 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(1,1)",
  "context.lineTo(3,1)",
  "context.lineTo(3,3)",
  "context.lineTo(1,3)",
  "context.lineTo(1,1)",
  "context.fill()",
  "context.beginPath()",
  "context.moveTo(4,1)",
  "context.lineTo(6,1)",
  "context.lineTo(6,3)",
  "context.lineTo(4,3)",
  "context.lineTo(4,1)",
  "context.fill()",
]
`;

exports[`an infinite canvas context whose state is changed and who draws something and who changes state, draws something, changes state back and draws something again and who then clears a rect containing the second drawing should only have set the remaining state 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(1,1)",
  "context.lineTo(3,1)",
  "context.lineTo(3,3)",
  "context.lineTo(1,3)",
  "context.lineTo(1,1)",
  "context.fill()",
  "context.beginPath()",
  "context.moveTo(9,1)",
  "context.lineTo(11,1)",
  "context.lineTo(11,3)",
  "context.lineTo(9,3)",
  "context.lineTo(9,1)",
  "context.fill()",
]
`;

exports[`an infinite canvas context whose state is changed and who draws something and who changes state, draws something, changes state back and draws something again should have set a new state three times 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(1,1)",
  "context.lineTo(3,1)",
  "context.lineTo(3,3)",
  "context.lineTo(1,3)",
  "context.lineTo(1,1)",
  "context.fill()",
  "context.fillStyle = \\"#00f\\"",
  "context.beginPath()",
  "context.moveTo(5,1)",
  "context.lineTo(7,1)",
  "context.lineTo(7,3)",
  "context.lineTo(5,3)",
  "context.lineTo(5,1)",
  "context.fill()",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(9,1)",
  "context.lineTo(11,1)",
  "context.lineTo(11,3)",
  "context.lineTo(9,3)",
  "context.lineTo(9,1)",
  "context.fill()",
]
`;

exports[`an infinite canvas context whose state is changed and who draws something should have modified the context correctly 1`] = `
Array [
  "context.clearRect(0,0,200,200)",
  "context.restore()",
  "context.save()",
  "context.lineWidth = 1",
  "context.fillStyle = \\"#f00\\"",
  "context.beginPath()",
  "context.moveTo(1,1)",
  "context.lineTo(3,1)",
  "context.lineTo(3,3)",
  "context.lineTo(1,3)",
  "context.lineTo(1,1)",
  "context.fill()",
]
`;
