import { Transformer } from "./transformer";
import { Gesture } from "./gesture";
import { InfiniteCanvasConfig } from "../config/infinite-canvas-config";
import { TransformableBox } from "../interfaces/transformable-box";
import { Transformation } from "../transformation";
import { Movable } from "./movable";
import { Event } from "../custom-events/event";
export declare class InfiniteCanvasTransformer implements Transformer {
    private readonly viewBox;
    private readonly config;
    private gesture;
    private anchorSet;
    private _zoom;
    private _transformationChangeMonitor;
    get isTransforming(): boolean;
    constructor(viewBox: TransformableBox, config: InfiniteCanvasConfig);
    get transformationStart(): Event<void>;
    get transformationChange(): Event<void>;
    get transformationEnd(): Event<void>;
    get transformation(): Transformation;
    set transformation(value: Transformation);
    getGestureForOneMovable(movable: Movable): Gesture;
    getGestureForTwoMovables(movable1: Movable, movable2: Movable): Gesture;
    private createAnchorForMovable;
    createAnchorByExternalIdentifier(externalIdentifier: any, x: number, y: number): void;
    createAnchor(x: number, y: number): number;
    createRotationAnchor(x: number, y: number): number;
    moveAnchorByExternalIdentifier(externalIdentifier: any, x: number, y: number): void;
    moveAnchorByIdentifier(identifier: number, x: number, y: number): void;
    releaseAnchorByExternalIdentifier(externalIdentifier: any): void;
    releaseAnchorByIdentifier(identifier: number): void;
    zoom(x: number, y: number, scale: number): void;
    private getAnchor;
    private getRotationAnchor;
}
